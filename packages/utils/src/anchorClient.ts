import { Program, AnchorProvider, web3 } from '@coral-xyz/anchor';
import { PublicKey, Keypair, Connection } from '@solana/web3.js';
import { CreatorMissions } from './types';

export class AnchorClient {
  private program: Program<CreatorMissions>;
  private provider: AnchorProvider;

  constructor(
    programId: PublicKey,
    connection: Connection,
    wallet?: Keypair
  ) {
    this.provider = new AnchorProvider(connection, wallet || Keypair.generate(), {});
    this.program = new Program<CreatorMissions>(IDL, programId, this.provider);
  }

  async createCampaign(
    dev: PublicKey,
    campaignIndex: number,
    budget: number,
    tokenMint: PublicKey,
    startAt: number,
    endAt: number,
    bonusFormula: number,
    requirementsUri: string
  ) {
    const [campaignPDA] = PublicKey.findProgramAddressSync(
      [Buffer.from('campaign'), dev.toBuffer(), Buffer.from([campaignIndex])],
      this.program.programId
    );

    return await this.program.methods
      .createCampaign(
        new web3.BN(budget),
        tokenMint,
        new web3.BN(startAt),
        new web3.BN(endAt),
        bonusFormula,
        requirementsUri
      )
      .accounts({
        campaign: campaignPDA,
        dev,
        systemProgram: web3.SystemProgram.programId,
      })
      .rpc();
  }

  async fundCampaign(
    campaign: PublicKey,
    dev: PublicKey,
    devTokenAccount: PublicKey,
    campaignTokenAccount: PublicKey,
    amount: number
  ) {
    return await this.program.methods
      .fundCampaign(new web3.BN(amount))
      .accounts({
        campaign,
        dev,
        devTokenAccount,
        campaignTokenAccount,
        tokenProgram: web3.SPL_TOKEN_PROGRAM_ID,
      })
      .rpc();
  }

  async claimMission(
    campaign: PublicKey,
    shiller: PublicKey
  ) {
    const [claimPDA] = PublicKey.findProgramAddressSync(
      [Buffer.from('claim'), campaign.toBuffer(), shiller.toBuffer()],
      this.program.programId
    );

    return await this.program.methods
      .claimMission()
      .accounts({
        claim: claimPDA,
        campaign,
        shiller,
        systemProgram: web3.SystemProgram.programId,
      })
      .rpc();
  }

  async submitProof(
    claim: PublicKey,
    shiller: PublicKey,
    proofHash: Uint8Array
  ) {
    return await this.program.methods
      .submitProof(Array.from(proofHash))
      .accounts({
        claim,
        shiller,
      })
      .rpc();
  }

  async submitOracleReport(
    claim: PublicKey,
    oracle: PublicKey,
    verdict: number,
    metricsDigest: Uint8Array
  ) {
    const [reportPDA] = PublicKey.findProgramAddressSync(
      [Buffer.from('report'), claim.toBuffer()],
      this.program.programId
    );

    return await this.program.methods
      .submitOracleReport(verdict, Array.from(metricsDigest))
      .accounts({
        oracleReport: reportPDA,
        claim,
        oracle,
        systemProgram: web3.SystemProgram.programId,
      })
      .rpc();
  }

  async payout(
    claim: PublicKey,
    campaign: PublicKey,
    campaignTokenAccount: PublicKey,
    shillerTokenAccount: PublicKey
  ) {
    return await this.program.methods
      .payout()
      .accounts({
        claim,
        campaign,
        campaignTokenAccount,
        shillerTokenAccount,
        tokenProgram: web3.SPL_TOKEN_PROGRAM_ID,
      })
      .rpc();
  }

  // Helper methods to get PDAs
  getCampaignPDA(dev: PublicKey, campaignIndex: number): PublicKey {
    const [pda] = PublicKey.findProgramAddressSync(
      [Buffer.from('campaign'), dev.toBuffer(), Buffer.from([campaignIndex])],
      this.program.programId
    );
    return pda;
  }

  getClaimPDA(campaign: PublicKey, shiller: PublicKey): PublicKey {
    const [pda] = PublicKey.findProgramAddressSync(
      [Buffer.from('claim'), campaign.toBuffer(), shiller.toBuffer()],
      this.program.programId
    );
    return pda;
  }

  getOracleReportPDA(claim: PublicKey): PublicKey {
    const [pda] = PublicKey.findProgramAddressSync(
      [Buffer.from('report'), claim.toBuffer()],
      this.program.programId
    );
    return pda;
  }
}

// IDL will be generated by Anchor build
const IDL = {
  // This will be replaced with the actual IDL from anchor build
  version: "0.1.0",
  name: "creator_missions",
  instructions: [],
  accounts: [],
  types: [],
};
